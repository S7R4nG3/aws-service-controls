{
    "service": "AWS Lambda",
    "security": [
        {
            "name": "CSA Cloud Controls Matrix",
            "version": "4.0.10",
            "controls": [
                {
                    "identifier": "IAM-01",
                    "title": "Identity and Access Management Policy and Procedures",
                    "severity": "Critical",
                    "description": "Establish comprehensive identity and access management policies for Lambda function access",
                    "implementation": {
                        "type": "Platform/IaC",
                        "description": "Implement IAM policies using least privilege principle, define execution roles with minimal required permissions, and establish service-linked roles for Lambda functions"
                    }
                },
                {
                    "identifier": "DSI-01",
                    "title": "Data Security and Information Lifecycle Management",
                    "severity": "Critical",
                    "description": "Implement data classification and protection mechanisms for data processed by Lambda functions",
                    "implementation": {
                        "type": "User/IaC",
                        "description": "Classify data processed by functions, implement encryption at rest and in transit, use AWS KMS for key management, and establish data retention policies"
                    }
                },
                {
                    "identifier": "EKM-01",
                    "title": "Encryption and Key Management",
                    "severity": "Critical",
                    "description": "Ensure proper encryption and key management for Lambda environment variables and data",
                    "implementation": {
                        "type": "User/IaC",
                        "description": "Enable encryption for environment variables using AWS KMS, implement proper key rotation policies, and use customer-managed keys for sensitive data"
                    }
                },
                {
                    "identifier": "IVS-01",
                    "title": "Infrastructure and Virtualization Security",
                    "severity": "High",
                    "description": "Implement network security controls and VPC configuration for Lambda functions",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure Lambda functions within VPC when accessing private resources, implement security groups and NACLs, and use VPC endpoints for AWS service communication"
                    }
                },
                {
                    "identifier": "TVM-01",
                    "title": "Threat and Vulnerability Management",
                    "severity": "High",
                    "description": "Implement vulnerability scanning and threat detection for Lambda functions",
                    "implementation": {
                        "type": "Platform/User",
                        "description": "Enable AWS GuardDuty, implement dependency scanning for function code, use AWS Inspector for container images, and establish vulnerability remediation processes"
                    }
                }
            ]
        },
        {
            "name": "NIST 800-53",
            "version": "Rev 5",
            "controls": [
                {
                    "identifier": "AC-2",
                    "title": "Account Management",
                    "severity": "Critical",
                    "description": "Implement proper account management for Lambda function access and execution roles",
                    "implementation": {
                        "type": "Platform/IaC",
                        "description": "Create dedicated execution roles for each Lambda function, implement role-based access control, and establish account lifecycle management procedures"
                    }
                },
                {
                    "identifier": "AC-3",
                    "title": "Access Enforcement",
                    "severity": "Critical",
                    "description": "Enforce approved authorizations for logical access to Lambda functions and resources",
                    "implementation": {
                        "type": "Platform/IaC",
                        "description": "Implement resource-based policies, use API Gateway for function access control, and configure cross-account access policies with proper conditions"
                    }
                },
                {
                    "identifier": "SC-8",
                    "title": "Transmission Confidentiality and Integrity",
                    "severity": "Critical",
                    "description": "Protect the confidentiality and integrity of transmitted information",
                    "implementation": {
                        "type": "User/IaC",
                        "description": "Use HTTPS/TLS for all API communications, implement certificate pinning where applicable, and encrypt data in transit between Lambda and other services"
                    }
                },
                {
                    "identifier": "AU-2",
                    "title": "Event Logging",
                    "severity": "High",
                    "description": "Determine auditable events and ensure Lambda function activities are logged",
                    "implementation": {
                        "type": "Platform/IaC",
                        "description": "Enable CloudTrail for API calls, configure CloudWatch Logs for function execution logs, and implement structured logging within function code"
                    }
                },
                {
                    "identifier": "SC-7",
                    "title": "Boundary Protection",
                    "severity": "High",
                    "description": "Monitor and control communications at external boundaries and key internal boundaries",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure VPC boundaries for Lambda functions, implement security groups as firewalls, and use AWS WAF for API Gateway protection"
                    }
                },
                {
                    "identifier": "SI-4",
                    "title": "System Monitoring",
                    "severity": "High",
                    "description": "Monitor Lambda functions for security events and performance anomalies",
                    "implementation": {
                        "type": "Platform/User",
                        "description": "Configure CloudWatch alarms for function metrics, implement AWS X-Ray for distributed tracing, and use AWS Security Hub for centralized monitoring"
                    }
                },
                {
                    "identifier": "CP-9",
                    "title": "System Backup",
                    "severity": "Medium",
                    "description": "Conduct backups of Lambda function code and configuration",
                    "implementation": {
                        "type": "User/IaC",
                        "description": "Store function code in version control systems, implement function versioning and aliases, and backup deployment packages to S3"
                    }
                }
            ]
        },
        {
            "name": "AWS Foundational Security Best Practices",
            "version": "1.0.0",
            "controls": [
                {
                    "identifier": "Lambda.1",
                    "title": "Lambda functions should prohibit public access by other accounts",
                    "severity": "Critical",
                    "description": "Ensure Lambda functions are not publicly accessible unless specifically required",
                    "implementation": {
                        "type": "IaC",
                        "description": "Review and restrict resource-based policies, avoid wildcard principals in policies, and implement condition statements for cross-account access"
                    }
                },
                {
                    "identifier": "Lambda.2",
                    "title": "Lambda functions should use supported runtimes",
                    "severity": "Critical",
                    "description": "Ensure Lambda functions use currently supported runtime versions",
                    "implementation": {
                        "type": "User",
                        "description": "Regularly update function runtimes to supported versions, establish runtime deprecation tracking, and test functions with new runtime versions"
                    }
                },
                {
                    "identifier": "Lambda.3",
                    "title": "Lambda functions should be in a VPC",
                    "severity": "High",
                    "description": "Configure Lambda functions within a VPC when accessing private resources",
                    "implementation": {
                        "type": "IaC",
                        "description": "Place functions requiring private resource access in VPC, configure appropriate subnets and security groups, and use VPC endpoints for AWS services"
                    }
                },
                {
                    "identifier": "Lambda.4",
                    "title": "Lambda functions should have a dead letter queue configured",
                    "severity": "Medium",
                    "description": "Configure dead letter queues for asynchronous Lambda function invocations",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure SQS or SNS as dead letter queue destination, set appropriate retry policies, and implement monitoring for failed invocations"
                    }
                },
                {
                    "identifier": "Lambda.5",
                    "title": "VPC Lambda functions should operate in multiple Availability Zones",
                    "severity": "Medium",
                    "description": "Ensure VPC-configured Lambda functions can operate across multiple AZs",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure function subnets in multiple availability zones, ensure proper subnet routing, and validate cross-AZ connectivity"
                    }
                }
            ]
        },
        {
            "name": "AWS Security Hub",
            "version": "2023.1.0",
            "controls": [
                {
                    "identifier": "Lambda.ConcurrentExecutions",
                    "title": "Lambda functions should have reserved concurrency configured",
                    "severity": "High",
                    "description": "Configure reserved concurrency to prevent resource exhaustion attacks",
                    "implementation": {
                        "type": "IaC",
                        "description": "Set appropriate reserved concurrency limits, monitor concurrency usage, and implement throttling controls"
                    }
                },
                {
                    "identifier": "Lambda.EnvironmentEncryption",
                    "title": "Lambda environment variables should be encrypted",
                    "severity": "High",
                    "description": "Encrypt sensitive data in Lambda environment variables",
                    "implementation": {
                        "type": "User/IaC",
                        "description": "Enable KMS encryption for environment variables, use AWS Systems Manager Parameter Store for sensitive configuration, and implement proper key management"
                    }
                },
                {
                    "identifier": "Lambda.Tracing",
                    "title": "Lambda functions should have tracing enabled",
                    "severity": "Medium",
                    "description": "Enable AWS X-Ray tracing for Lambda functions to improve observability",
                    "implementation": {
                        "type": "IaC",
                        "description": "Enable X-Ray tracing mode, configure sampling rules, and implement distributed tracing across services"
                    }
                },
                {
                    "identifier": "Lambda.CodeSigning",
                    "title": "Lambda functions should use code signing",
                    "severity": "Medium",
                    "description": "Implement code signing to ensure function integrity",
                    "implementation": {
                        "type": "User/IaC",
                        "description": "Create signing profiles, configure code signing policies, and establish code integrity verification processes"
                    }
                }
            ]
        }
    ],
    "operational": [],
    "cost": [
        {
            "name": "AWS Lambda Cost Optimization Best Practices",
            "version": "2023",
            "controls": [
                {
                    "identifier": "COST-001",
                    "title": "Right-size Lambda function memory allocation",
                    "severity": "High",
                    "description": "Optimize memory allocation to balance performance and cost",
                    "implementation": {
                        "type": "User",
                        "description": "Use AWS Lambda Power Tuning tool to find optimal memory configuration, monitor memory utilization metrics, and adjust memory based on actual usage patterns"
                    }
                },
                {
                    "identifier": "COST-002",
                    "title": "Minimize Lambda function execution time",
                    "severity": "High",
                    "description": "Optimize function code to reduce execution duration and associated costs",
                    "implementation": {
                        "type": "User",
                        "description": "Optimize code performance, minimize cold start times, use connection pooling, implement efficient algorithms, and reduce package size"
                    }
                },
                {
                    "identifier": "COST-003",
                    "title": "Use appropriate Lambda pricing model",
                    "severity": "High",
                    "description": "Choose between on-demand and provisioned concurrency based on usage patterns",
                    "implementation": {
                        "type": "IaC/User",
                        "description": "Analyze traffic patterns, use provisioned concurrency only for predictable workloads, implement auto-scaling for provisioned concurrency, and monitor cost impact"
                    }
                },
                {
                    "identifier": "COST-004",
                    "title": "Optimize Lambda function architecture",
                    "severity": "Medium",
                    "description": "Design efficient architectures to minimize Lambda invocations and data transfer",
                    "implementation": {
                        "type": "User",
                        "description": "Batch process records where possible, use appropriate event sources, minimize cross-region data transfer, and implement efficient retry mechanisms"
                    }
                },
                {
                    "identifier": "COST-005",
                    "title": "Monitor and alert on Lambda costs",
                    "severity": "Medium",
                    "description": "Implement cost monitoring and alerting for Lambda usage",
                    "implementation": {
                        "type": "Platform/IaC",
                        "description": "Set up AWS Cost Explorer reports, configure billing alerts, use AWS Budgets for cost thresholds, and implement cost allocation tags"
                    }
                },
                {
                    "identifier": "COST-006",
                    "title": "Clean up unused Lambda resources",
                    "severity": "Medium",
                    "description": "Regularly review and remove unused Lambda functions and versions",
                    "implementation": {
                        "type": "User",
                        "description": "Implement automated cleanup of old function versions, remove unused functions, clean up associated resources like layers and triggers, and establish resource lifecycle policies"
                    }
                },
                {
                    "identifier": "COST-007",
                    "title": "Optimize Lambda layers usage",
                    "severity": "Low",
                    "description": "Use Lambda layers efficiently to reduce deployment package size and improve reusability",
                    "implementation": {
                        "type": "User/IaC",
                        "description": "Share common libraries through layers, optimize layer sizes, version layers appropriately, and avoid duplicate dependencies across layers"
                    }
                }
            ]
        }
    ]
}