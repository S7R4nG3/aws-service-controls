{
    "service": "AWS Lambda",
    "security": [
        {
            "name": "CSA Cloud Controls Matrix",
            "version": "v4.0",
            "controls": [
                {
                    "identifier": "IAM-01",
                    "title": "Entitlement",
                    "severity": "High",
                    "description": "Establish comprehensive identity and access management policies for Lambda functions including least privilege access",
                    "implementation": {
                        "type": "IaC",
                        "description": "Define IAM roles and policies in CloudFormation/Terraform templates with minimal required permissions for Lambda execution"
                    }
                },
                {
                    "identifier": "EKM-03",
                    "title": "Sensitive Data Protection",
                    "severity": "High", 
                    "description": "Implement proper encryption key management for Lambda environment variables and data at rest",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure AWS KMS keys for encrypting Lambda environment variables and enable encryption at rest"
                    }
                },
                {
                    "identifier": "DSI-01",
                    "title": "Classification",
                    "severity": "High",
                    "description": "Classify and protect sensitive data processed by Lambda functions according to data classification policies",
                    "implementation": {
                        "type": "User",
                        "description": "Implement data classification tagging and ensure sensitive data is encrypted in transit and at rest within Lambda code"
                    }
                },
                {
                    "identifier": "AIS-01",
                    "title": "Application Security",
                    "severity": "Medium",
                    "description": "Secure Lambda function interfaces and APIs with proper authentication and authorization mechanisms",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure API Gateway with appropriate authentication methods and implement function-level security controls"
                    }
                },
                {
                    "identifier": "IVS-01",
                    "title": "Network Security",
                    "severity": "Medium",
                    "description": "Ensure Lambda functions are deployed in secure network configurations with proper VPC settings",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure VPC settings, security groups, and subnets for Lambda functions requiring network isolation"
                    }
                },
                {
                    "identifier": "BCR-01",
                    "title": "Business Continuity Planning",
                    "severity": "Medium",
                    "description": "Implement business continuity and disaster recovery procedures for Lambda-based applications",
                    "implementation": {
                        "type": "Platform",
                        "description": "Deploy Lambda functions across multiple availability zones and implement cross-region backup strategies"
                    }
                },
                {
                    "identifier": "SEF-01",
                    "title": "Contact / Personnel Security",
                    "severity": "Low",
                    "description": "Enable comprehensive logging and monitoring for Lambda functions to support incident response",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure CloudWatch Logs, X-Ray tracing, and CloudTrail for comprehensive Lambda function monitoring"
                    }
                }
            ]
        },
        {
            "name": "NIST 800-53",
            "version": "Rev 5",
            "controls": [
                {
                    "identifier": "AC-2",
                    "title": "Account Management",
                    "severity": "High",
                    "description": "Manage Lambda function service accounts and execution roles with proper lifecycle management",
                    "implementation": {
                        "type": "IaC",
                        "description": "Implement automated IAM role provisioning and deprovisioning using infrastructure as code with regular access reviews"
                    }
                },
                {
                    "identifier": "AC-3",
                    "title": "Access Enforcement",
                    "severity": "High",
                    "description": "Enforce approved authorizations for Lambda function execution and resource access",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure resource-based policies and IAM policies to enforce least privilege access for Lambda functions"
                    }
                },
                {
                    "identifier": "SC-8",
                    "title": "Transmission Confidentiality and Integrity",
                    "severity": "High",
                    "description": "Protect the confidentiality and integrity of transmitted information to and from Lambda functions",
                    "implementation": {
                        "type": "User",
                        "description": "Implement TLS encryption for all Lambda function communications and validate certificates in function code"
                    }
                },
                {
                    "identifier": "AU-2",
                    "title": "Event Logging",
                    "severity": "Medium",
                    "description": "Enable comprehensive audit logging for Lambda function execution and API calls",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure CloudWatch Logs retention policies and enable detailed monitoring for all Lambda functions"
                    }
                },
                {
                    "identifier": "CM-2",
                    "title": "Baseline Configuration",
                    "severity": "Medium",
                    "description": "Establish and maintain baseline configurations for Lambda function deployments",
                    "implementation": {
                        "type": "IaC",
                        "description": "Use infrastructure as code templates to maintain consistent Lambda function configurations and deployment baselines"
                    }
                },
                {
                    "identifier": "SI-4",
                    "title": "System Monitoring",
                    "severity": "Medium",
                    "description": "Monitor Lambda functions for security events and performance anomalies",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure CloudWatch alarms, AWS X-Ray, and GuardDuty for comprehensive Lambda function monitoring"
                    }
                },
                {
                    "identifier": "CP-9",
                    "title": "System Backup",
                    "severity": "Low",
                    "description": "Conduct backups of Lambda function code and configuration information",
                    "implementation": {
                        "type": "User",
                        "description": "Implement version control for Lambda function code and automated backup of function configurations to S3"
                    }
                }
            ]
        },
        {
            "name": "AWS Foundational Security Best Practices",
            "version": "1.0.0",
            "controls": [
                {
                    "identifier": "Lambda.1",
                    "title": "Lambda functions should prohibit public access by other accounts",
                    "severity": "High",
                    "description": "Ensure Lambda functions cannot be invoked by unauthorized external accounts",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure resource-based policies to restrict function invocation to authorized accounts and services only"
                    }
                },
                {
                    "identifier": "Lambda.2",
                    "title": "Lambda functions should use supported runtimes",
                    "severity": "High",
                    "description": "Ensure Lambda functions use supported and up-to-date runtime versions",
                    "implementation": {
                        "type": "User",
                        "description": "Regularly update Lambda function runtime versions and implement automated scanning for deprecated runtimes"
                    }
                },
                {
                    "identifier": "Lambda.3",
                    "title": "Lambda functions should use dead letter queues",
                    "severity": "Medium",
                    "description": "Configure dead letter queues for Lambda functions to handle failed executions",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure SQS or SNS dead letter queues in Lambda function configuration for proper error handling"
                    }
                },
                {
                    "identifier": "Lambda.5",
                    "title": "VPC Lambda functions should operate in multiple Availability Zones",
                    "severity": "Medium",
                    "description": "Deploy Lambda functions across multiple AZs for high availability when using VPC configuration",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure Lambda VPC settings to include subnets from multiple availability zones in infrastructure templates"
                    }
                },
                {
                    "identifier": "Lambda.4",
                    "title": "Lambda functions should have a dead letter queue configured",
                    "severity": "Low",
                    "description": "Ensure proper error handling and monitoring for failed Lambda function executions",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure CloudWatch alarms to monitor dead letter queue metrics and implement automated remediation"
                    }
                }
            ]
        }
    ],
    "operational": [],
    "cost": [
        {
            "name": "AWS Lambda Cost Optimization Best Practices",
            "version": "2024",
            "controls": [
                {
                    "identifier": "COST-01",
                    "title": "Right-size Lambda Function Memory",
                    "severity": "High",
                    "description": "Optimize Lambda function memory allocation to balance performance and cost",
                    "implementation": {
                        "type": "User",
                        "description": "Use AWS Lambda Power Tuning tool to determine optimal memory configuration and implement automated memory optimization"
                    }
                },
                {
                    "identifier": "COST-02", 
                    "title": "Implement Function Timeout Optimization",
                    "severity": "High",
                    "description": "Set appropriate timeout values to prevent unnecessary charges from long-running functions",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure optimal timeout values in infrastructure templates based on function execution patterns and requirements"
                    }
                },
                {
                    "identifier": "COST-03",
                    "title": "Use Provisioned Concurrency Judiciously",
                    "severity": "Medium",
                    "description": "Apply provisioned concurrency only where cold start latency is critical to avoid unnecessary costs",
                    "implementation": {
                        "type": "Platform",
                        "description": "Implement application auto-scaling for provisioned concurrency based on usage patterns and schedule-based scaling"
                    }
                },
                {
                    "identifier": "COST-04",
                    "title": "Optimize Code for Efficiency",
                    "severity": "Medium",
                    "description": "Write efficient code to minimize execution time and memory usage",
                    "implementation": {
                        "type": "User",
                        "description": "Implement code optimization techniques including connection reuse, efficient libraries, and minimal package sizes"
                    }
                },
                {
                    "identifier": "COST-05",
                    "title": "Implement Cost Monitoring and Alerting",
                    "severity": "Medium",
                    "description": "Monitor Lambda costs and set up alerts for unusual spending patterns",
                    "implementation": {
                        "type": "Platform",
                        "description": "Configure AWS Cost Explorer, CloudWatch metrics, and billing alerts to monitor Lambda function costs and usage patterns"
                    }
                },
                {
                    "identifier": "COST-06",
                    "title": "Use ARM-based Graviton Processors",
                    "severity": "Low",
                    "description": "Leverage ARM-based processors for better price-performance ratio where compatible",
                    "implementation": {
                        "type": "IaC",
                        "description": "Configure Lambda functions to use arm64 architecture in infrastructure templates for supported workloads"
                    }
                },
                {
                    "identifier": "COST-07",
                    "title": "Implement Function Cleanup and Lifecycle Management",
                    "severity": "Low",
                    "description": "Remove unused Lambda functions and versions to avoid unnecessary storage costs",
                    "implementation": {
                        "type": "Platform",
                        "description": "Implement automated cleanup of unused function versions and aliases using lifecycle policies and AWS Config rules"
                    }
                }
            ]
        }
    ]
}